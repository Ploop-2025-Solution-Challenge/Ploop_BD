// üìÅ MissionVerificationService.java
package com.example.ploop_backend.domain.mission.service;

import com.example.ploop_backend.domain.mission.entity.MissionVerification;
import com.example.ploop_backend.domain.mission.entity.UserMission;
import com.example.ploop_backend.domain.mission.repository.MissionVerificationRepository;
import com.example.ploop_backend.domain.mission.repository.UserMissionRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@Service
@RequiredArgsConstructor
public class MissionVerificationService {

    private final MissionVerificationRepository missionVerificationRepository;
    private final UserMissionRepository userMissionRepository;

    // Ïú†Ï†ÄÍ∞Ä ÏÇ¨ÏßÑ Ï†úÏ∂ú Ïãú Ìò∏Ï∂ú
    //
    public MissionVerification createVerification(Long userMissionId, String imageUrl) {
        UserMission userMission = userMissionRepository.findById(userMissionId).orElseThrow();

        MissionVerification verification = MissionVerification.builder()
                .userMission(userMission)
                .imageUrl(imageUrl)
                .isVerified(null) // ÏïÑÏßÅ AI Í≤∞Í≥º ÎØ∏Ï†ï
                .submittedAt(LocalDateTime.now()) // Ï†úÏ∂ú ÏãúÍ∞Ñ Í∏∞Î°ù
                .build();

        return missionVerificationRepository.save(verification);
    }

    // AIÍ∞Ä Í≤∞Í≥ºÎ•º ÌåêÎ≥ÑÌï¥ÏÑú ÎØ∏ÏÖò Ïù∏Ï¶ù Ï≤òÎ¶¨
    public void applyAIResult(Long verificationId, boolean isVerified) {
        MissionVerification verification = missionVerificationRepository.findById(verificationId)
                .orElseThrow();

        verification.setIsVerified(isVerified);
        verification.setVerifiedAt(LocalDateTime.now());
        missionVerificationRepository.save(verification);

        if (isVerified) {
            UserMission um = verification.getUserMission();
            um.setIsVerified(true);
            userMissionRepository.save(um);
        }
    }
}
